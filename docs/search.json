[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Stata 16: New Features",
    "section": "",
    "text": "1 Preface"
  },
  {
    "objectID": "index.html#how-to-use-this-document",
    "href": "index.html#how-to-use-this-document",
    "title": "Stata 16: New Features",
    "section": "1.1 How to use this document",
    "text": "1.1 How to use this document\nThese notes are published using Quarto. The Stata code is first rendered using a Stata dynamic document. The source code for these notes can be found at https://github.com/josherrickson/stata-16 for the curious.\nAll images should link to full-size versions to see detail if needed."
  },
  {
    "objectID": "index.html#contact-information",
    "href": "index.html#contact-information",
    "title": "Stata 16: New Features",
    "section": "1.2 Contact information",
    "text": "1.2 Contact information\nYou may contact me, Josh Errickson, at jerrick at umich.edu."
  },
  {
    "objectID": "index.html#usage",
    "href": "index.html#usage",
    "title": "Stata 16: New Features",
    "section": "1.3 Usage",
    "text": "1.3 Usage\nThis material was created for use in workshops and short courses presented by faculty and staff from the Consulting for Statistics, Computing & Analytics Research (CSCAR) at the University of Michigan. No part of this material may be used for other purposes, copied, changed, or sold."
  },
  {
    "objectID": "01-frames.html",
    "href": "01-frames.html",
    "title": "2  Frames",
    "section": "",
    "text": "Prior to Stata 16, one infamous unique aspect of Stata was support for only one data set at a time. If you wanted to work with multiple data-sets, you either needed to merge or append the data sets together if there was a natural connection between them, or be frequently opening and closing data or using preserve and restore to jump between them.\nFrames are Stata’s approach to handling multiple data sets. You can now have multiple frames, each with their own data, which you can move between with ease, and even transfer variables between.\n\n3 When might you use frames?\n\nInterruptions - You’re working on a project, and someone asks you to do something on another data set. You can open the other data set in a new frame, do whatever is needed, then swap back to your current project without any loss.\nDestructive data manipulations - If you need to do something destructive, you can copy your current data to a new frame and do the destructive operations there.\nLinked data sets - When you have data that is linked, rather than merging, you can link the two frames together. (Either at the same level - e.g. pre & post survey for individuals; or at different levels - e.g. a person data set and a city data set.)\nCollate model results - When using svmat after running a model to place the model results in the data, place those results in a new frame instead.\n\n\n\n4 The basics\nThe primary command for dealing with frames is, unsurprisingly, frame (or frames, either works). By itself, it will remind you of the current frame:\n. frame\n  (current frame is default)\nThis tells us the name of the frame, the name of a new frame when starting Stata is “default”. There is nothing special about this name, we can easily rename the frame.\n. frame rename default maindata\n\n. frame\n  (current frame is maindata)\nWe can create a second data frame as well.\n. frame create seconddata\n\n. frame\n  (current frame is maindata)\nNotice that we’re still in the “maindata” frame. We can jump between frames via frame change.\n. frame change seconddata\n\n. frame\n  (current frame is seconddata)\n\n. frame change otherdata\nframe otherdata not found\nr(111);\nNotice that the last command failed; we must create a frame before we can switch to it.\nWe can keep track of all our frames via frame dir.\n. frame dir\n  maindata    0 x 0\n  seconddata  0 x 0\nThe 0 x 0 is telling us that in neither frame has any data loaded. Let’s load some data to make this more interesting.\n. sysuse auto\n(1978 automobile data)\n\n. frame change maindata\n\n. sysuse bplong\n(Fictional blood-pressure data)\n\n. frame dir\n  maindata    240 x 5; Fictional blood-pressure data\n  seconddata  74 x 12; 1978 automobile data\nNow we can see what size the data is in each frame. The description next to each frame is set via label data, a previously not very useful trait that takes on new important in keeping track of which data is loaded in which frame.\n. label data \"blood-pressure data\"\n\n. frame dir\n* maindata    240 x 5; blood-pressure data\n  seconddata  74 x 12; 1978 automobile data\n\nNote: Frames marked with * contain unsaved data.\nWe see that the output of frame dir is changed. Note that most data sets which are not provided by Stata will likely not have a data label, so you can add one as desired.\nNote also that frame dir will track which frames have data that needs to be saved.\n\n\n5 Aliases\nThere are two aliases to keep track of.\n\npwf (print working frame) is an alias for frame.\ncwf (change working frame) is an alias for frame change.\n\nThese aliases mimic pwd and cd, Stata’s way of viewing and changing the current working directory.\n\n\n6 Remember to drop frames!\nWhen you have data loaded into a frame, it is (like all data in Stata) loaded into your memory. That means if you open multiple very large data sets in frames, you can quickly run out of memory when you never had before.\nFrames can be dropped via frame drop as you might guess.\n. frame dir\n* maindata    240 x 5; blood-pressure data\n  seconddata  74 x 12; 1978 automobile data\n\nNote: Frames marked with * contain unsaved data.\n\n. frame drop seconddata\n\n. frame dir\n* maindata  240 x 5; blood-pressure data\n\nNote: Frames marked with * contain unsaved data.\nWhile not a new command to Stata 16, the compress command can be very handy as it will attempt to shrink the size of the data as much as possible. This process is non-destructive, so there is no harm in running it.\nYou cannot drop the frame you are currently in.\n. frame drop mainframe\nframe(s) mainframe not found\nr(111);\nTo drop all frames and their data, and reset Stata to a single “default” frame,\n. frame reset\n\n. frame dir\n  default  0 x 0\nNote that clear frames is an alias for frame reset and functions as well.\n\n\n7 Copying into frames\nThe contents of the current frame can be transfered into a new (or overwrite an existing frame). This may be useful for performing destructive operations such as collapse.\n. sysuse auto\n(1978 automobile data)\n\n. frame copy default newframe\n\n. frame copy default newframe\nframe newframe already defined\nr(110);\n\n. frame copy default newframe, replace\nAs you can see, the replace is needed if the new frame already exists, regardless of whether that frame has data or not.\nWe can also selectively move data over.\n. frame put mpg headroom, into(newframe2)\n\n. frame dir\n  default    74 x 12; 1978 automobile data\n  newframe   74 x 12; 1978 automobile data\n* newframe2  74 x 2; 1978 automobile data\n\nNote: Frames marked with * contain unsaved data.\nNote that unlike frame copy, there is no replace option, meaning frame put must operate on an un-existing frame.\n\n\n8 Executing commands in a different frame\nSwitching between frames can become tedious if you do it often.\n. frame change newframe2\n\n. summarize\n\n    Variable |        Obs        Mean    Std. dev.       Min        Max\n-------------+---------------------------------------------------------\n         mpg |         74     21.2973    5.785503         12         41\n    headroom |         74    2.993243    .8459948        1.5          5\n\n. frame change default\nInstead, you can use the frame: prefix to execute a command in another frame without switching frames.\n. frame newframe2: summarize\n\n    Variable |        Obs        Mean    Std. dev.       Min        Max\n-------------+---------------------------------------------------------\n         mpg |         74     21.2973    5.785503         12         41\n    headroom |         74    2.993243    .8459948        1.5          5\nYou can use curly braces to execute a chunk of code as well.\n. frame newframe2 {\n.   summarize\n\n    Variable |        Obs        Mean    Std. dev.       Min        Max\n-------------+---------------------------------------------------------\n         mpg |         74     21.2973    5.785503         12         41\n    headroom |         74    2.993243    .8459948        1.5          5\n.   describe, simple\nmpg       headroom\n. }\n\n\n9 Linking data sets\nIn addition to allowing multiple data sets to be open at a time, we can link frames together such that rows of data in each frames are connected to each-other and can inter-operate. This requires a linking variable in each data set which will connect the rows. The two data sets can be at the same levels or at different levels.\nFor example, we might have data sets collected from multiple waves of surveys and follow-ups during which the same people (modulo some non-responses) are contained in each data set. Then the person ID variable in the data sets would be the linking variable.\nAnother example might be one file at the person level, and another file at the city level. The linking variable would be city name, which would be unique in the city file, but could potentially be repeated in the person level file.\nThe command to link files is frlink and requires specifying both the linking variable(s) and the frame to link to.\nfrlink 1:1 linkvar, frame(otherframe)\nLet’s load some data from NHANES. Each file contains a row per subject.\n. frame reset\n\n. frame rename default demographics\n\n. frame create diet\n\n. frame create bp\n\n. \n. import sasxport5 \"https://wwwn.cdc.gov/Nchs/Nhanes/2015-2016/DEMO_I.XPT\", cle\n&gt; ar\n\n. frame diet: import sasxport5 \"https://wwwn.cdc.gov/Nchs/Nhanes/2015-2016/DR1T\n&gt; OT_I.XPT\", clear\n\n. frame bp: import sasxport5 \"https://wwwn.cdc.gov/Nchs/Nhanes/2015-2016/BPX_I.\n&gt; XPT\", clear\n\n. frame dir\n* bp            9544 x 21\n* demographics  9971 x 47\n* diet          9544 x 168\n\nNote: Frames marked with * contain unsaved data.\nSo as you can see, the current frame is the “demographics” frame, and the other frames contains diet and blood pressure information. The variable seqn records person ID.\n. frlink 1:1 seqn, frame(bp)\n(427 observations in frame demographics unmatched)\n\n. frlink 1:1 seqn, frame(diet)\n(427 observations in frame demographics unmatched)\nThe 1:1 subcommand specifies that it is a 1-to-1 link - each person has no more than 1 row of data in each file. An alternative is m:1 which allows multiple rows in the main file to be linked to a single row in the second frame. 1:m is not allowed at this point in time.\nThese commands created two new variables bp and diet (the same new as the linked frames) which indicate which row of the linked from is connected with the given row.\n. list bp diet in 25/29\n\n     +-----------+\n     | bp   diet |\n     |-----------|\n 25. | 25     25 |\n 26. | 26     26 |\n 27. |  .      . |\n 28. | 27     27 |\n 29. | 28     28 |\n     +-----------+\nHere we see that row 27 in the demographics file was not found in either “bp” or “diet” and thus has no entry in the bp or diet variables.\nLinks are tracked by the variables, we can see the current status of a link via frlink describe:\n. frlink describe diet\n\n  History:\n  -----------------------------------------------------------------------------\n    Link variable diet created on 16 Aug 2023 by\n\n    . frlink 1:1 seqn, frame(diet)\n\n    Frame diet contained an unnamed dataset\n  -----------------------------------------------------------------------------\n  Verifying linkage ...\n  Linkage is up to date.\nWe can see all links from the current frame via frlink dir:\n. frlink dir\n  (2 frlink variables found)\n  -----------------------------------------------------------------------------\n  bp created by frlink 1:1 seqn, frame(bp)\n  -----------------------------------------------------------------------------\n  diet created by frlink 1:1 seqn, frame(diet)\n  -----------------------------------------------------------------------------\n  Note: Type \"frlink describe varname\" to find out more, including whether\n  the variable is still valid.\nTo unlink frames, simply drop the variable.\n. drop diet\nFinally, the names of the created variables can be modified via the generate option to frlink:\n. frlink 1:1 seqn, frame(diet) generate(linkdiet)\n(427 observations in frame demographics unmatched)\n\n. frlink dir\n  (2 frlink variables found)\n  -----------------------------------------------------------------------------\n  bp created by frlink 1:1 seqn, frame(bp)\n  -----------------------------------------------------------------------------\n  linkdiet created by frlink 1:1 seqn, frame(diet) generate(linkdiet)\n  -----------------------------------------------------------------------------\n  Note: Type \"frlink describe varname\" to find out more, including whether\n  the variable is still valid.\n\n\n10 Working with linked frames\nOnce we have linked frames, we can use variables in the linked frame in analyses on the main frame.\nThe frget command can copy variables from the linked frame into the primary frame.\n. summarize bpxchr\nvariable bpxchr not found\nr(111);\n\n. frget bpxchr, from(bp)\n(8,033 missing values generated)\n(1 variable copied from linked frame)\n\n. summarize bpxchr\n\n    Variable |        Obs        Mean    Std. dev.       Min        Max\n-------------+---------------------------------------------------------\n      bpxchr |      1,938    106.5614    21.75754         58        190\nThis merges appropriately, with a 1:1 or m:1 link, to properly associate the values of the variable with the right observations.\nAlternatively, when using generate, we can reference a variable in another frame.\n. gen nonsense = frval(linkdiet, dr1tcalc)/frval(bp, bpxpls) + dmdhrage\n(3,158 missing values generated)\nNote that this calculation used variables from all three frames. A less nonsensical example might be where we want the percent of a countries population located in a given state. Imagine we have the primary frame of county data, and then a separate frame “state” containing state level information.\ngen percentpopulation = population/frval(state, population)"
  },
  {
    "objectID": "02-vl.html#initialization-of-variable-lists",
    "href": "02-vl.html#initialization-of-variable-lists",
    "title": "3  Variable Lists",
    "section": "3.1 Initialization of Variable Lists",
    "text": "3.1 Initialization of Variable Lists\nTo begin using variable lists, vl set must be run.\n. sysuse auto\n(1978 automobile data)\n\n. vl set\n\n-------------------------------------------------------------------------------\n                  |                      Macro's contents\n                  |------------------------------------------------------------\nMacro             |  # Vars   Description\n------------------+------------------------------------------------------------\nSystem            |\n  $vlcategorical  |       2   categorical variables\n  $vlcontinuous   |       2   continuous variables\n  $vluncertain    |       7   perhaps continuous, perhaps categorical variables\n  $vlother        |       0   all missing or constant variables\n-------------------------------------------------------------------------------\nNotes\n\n      1. Review contents of vlcategorical and vlcontinuous to ensure they are\n         correct.  Type vl list vlcategorical and type vl list vlcontinuous.\n\n      2. If there are any variables in vluncertain, you can reallocate them\n         to vlcategorical, vlcontinuous, or vlother.  Type\n         vl list vluncertain.\n\n      3. Use vl move to move variables among classifications.  For example,\n         type vl move (x50 x80) vlcontinuous to move variables x50 and x80 to\n         the continuous classification.\n\n      4. vlnames are global macros.  Type the vlname without the leading\n         dollar sign ($) when using vl commands.  Example: vlcategorical not\n         $vlcategorical.  Type the dollar sign with other Stata commands to\n         get a varlist.\nThis produces a surprisingly large amount of output. When you initialize the use of variable lists, Stata will automatically create four variable lists, called the “System variable lists”. Every numeric variable in the current data set is automatically placed into one of these four lists:\n\nvlcategorical: Variables which Stata thinks are categorical. These generally have to be non-negative, integer valued variables with less than 10 unique values.\nvlcontinuous: Variables which Stata thinks are continuous. These generally are variables which have negative values, have non-integer values, or are non-negative integers with more than 100 unique values.\nvluncertain: Variables which Stata is unsure whether they are continuous or categorical. These generally are non-negative integer valued variables with between 10 and 100 unique values.\nvlother: Any numeric variables that aren’t really useful - either all missing or constant variables.\n\nThere is a potential fifth system variable list, vldummy, which is created when option dummy is passed. Unsurprisingly, this will take variables containing only values 0 and 1 out of vlcategorical and into this list.\nThe “Notes” given below the output are generic; they appear regardless of how well Stata was able to categorize the variables. They can be suppressed with the nonotes option to vl set.\nThe two thresholds given above, 10 and 100, can be adjusted by the categorical and uncertain options. For example,\nvl set, categorical(20) uncertain(50)\nRunning vl set on an already vl-set data set will result in an error, unless the clear option is given, which will re-generate the lists.\n. vl set, dummy nonotes\none or more already classified variables specified\n    You requested that variables be added to vl's system classifications, but\n    you specified 11 variables that were already classified.\nr(110);\n\n. vl set, dummy nonotes clear\n\n-------------------------------------------------------------------------------\n                  |                      Macro's contents\n                  |------------------------------------------------------------\nMacro             |  # Vars   Description\n------------------+------------------------------------------------------------\nSystem            |\n  $vldummy        |       1   0/1 variable\n  $vlcategorical  |       1   categorical variable\n  $vlcontinuous   |       2   continuous variables\n  $vluncertain    |       7   perhaps continuous, perhaps categorical variables\n  $vlother        |       0   all missing or constant variables\n-------------------------------------------------------------------------------\nIn the above, we changed our minds and wanted to include the vldummy list, but since we’d already vl-set, we had the clear the existing set."
  },
  {
    "objectID": "02-vl.html#viewing-lists",
    "href": "02-vl.html#viewing-lists",
    "title": "3  Variable Lists",
    "section": "3.2 Viewing lists",
    "text": "3.2 Viewing lists\nWhen initializing the variable lists, we’re treated to a nice table of all defined lists. We can replay it via\n. vl dir\n\n-------------------------------------------------------------------------------\n                  |                      Macro's contents\n                  |------------------------------------------------------------\nMacro             |  # Vars   Description\n------------------+------------------------------------------------------------\nSystem            |\n  $vldummy        |       1   0/1 variable\n  $vlcategorical  |       1   categorical variable\n  $vlcontinuous   |       2   continuous variables\n  $vluncertain    |       7   perhaps continuous, perhaps categorical variables\n  $vlother        |       0   all missing or constant variables\n-------------------------------------------------------------------------------\nTo see the actual contents of the variable lists, we’ll need to use vl list.\n. vl list\n\n----------------------------------------------------\n    Variable | Macro           Values         Levels\n-------------+--------------------------------------\n     foreign | $vldummy        0 and 1             2\n       rep78 | $vlcategorical  integers &gt;=0        5\n    headroom | $vlcontinuous   noninteger           \n  gear_ratio | $vlcontinuous   noninteger           \n       price | $vluncertain    integers &gt;=0       74\n         mpg | $vluncertain    integers &gt;=0       21\n       trunk | $vluncertain    integers &gt;=0       18\n      weight | $vluncertain    integers &gt;=0       64\n      length | $vluncertain    integers &gt;=0       47\n        turn | $vluncertain    integers &gt;=0       18\ndisplacement | $vluncertain    integers &gt;=0       31\n----------------------------------------------------\nThis output produces one row for each variable in each variable list it is in. We haven’t used this yet, but variables can be in multiple lists.\nWe can list only specific lists:\n. vl list vlcategorical\n\n------------------------------------------------\nVariable | Macro           Values         Levels\n---------+--------------------------------------\n   rep78 | $vlcategorical  integers &gt;=0        5\n------------------------------------------------\nor specific variables\n. vl list (turn weight)\n\n------------------------------------------------\nVariable | Macro           Values         Levels\n---------+--------------------------------------\n    turn | $vluncertain    integers &gt;=0       18\n  weight | $vluncertain    integers &gt;=0       64\n------------------------------------------------\nIf “turn” was in multiple variable lists, each would appear as a row in this output.\nThere’s a bit of odd notation which can be used to sort the output by variable name, which makes it easier to identify variables which appear in multiple lists.\n. vl list (_all), sort\n\n----------------------------------------------------\n    Variable | Macro           Values         Levels\n-------------+--------------------------------------\ndisplacement | $vluncertain    integers &gt;=0       31\n     foreign | $vldummy        0 and 1             2\n  gear_ratio | $vlcontinuous   noninteger           \n    headroom | $vlcontinuous   noninteger           \n      length | $vluncertain    integers &gt;=0       47\n         mpg | $vluncertain    integers &gt;=0       21\n       price | $vluncertain    integers &gt;=0       74\n       rep78 | $vlcategorical  integers &gt;=0        5\n       trunk | $vluncertain    integers &gt;=0       18\n        turn | $vluncertain    integers &gt;=0       18\n      weight | $vluncertain    integers &gt;=0       64\n----------------------------------------------------\nThe (_all) tells Stata to report on all variables, and sorting (when you specify at least one variable) orders by variable name rather than variable list name.\nThis will also list any numeric variables which are not found in any list.\n\n3.2.1 Moving variables in system lists\nAfter initializing the variable lists, if you plan on using the system lists, you may need to move variables around (e.g. classifying the vluncertain variables into their proper lists). This can be done via vl move which has the syntax\nvl move (&lt;variables to move&gt;) &lt;destination list&gt;\nFor example, all the variables in vluncertain are actually continuous:\n. vl list vluncertain\n\n----------------------------------------------------\n    Variable | Macro           Values         Levels\n-------------+--------------------------------------\n       price | $vluncertain    integers &gt;=0       74\n         mpg | $vluncertain    integers &gt;=0       21\n       trunk | $vluncertain    integers &gt;=0       18\n      weight | $vluncertain    integers &gt;=0       64\n      length | $vluncertain    integers &gt;=0       47\n        turn | $vluncertain    integers &gt;=0       18\ndisplacement | $vluncertain    integers &gt;=0       31\n----------------------------------------------------\n\n. vl move (price mpg trunk weight length turn displacement) vlcontinuous\nnote: 7 variables specified and 7 variables moved.\n\n------------------------------\nMacro          # Added/Removed\n------------------------------\n$vldummy                     0\n$vlcategorical               0\n$vlcontinuous                7\n$vluncertain                -7\n$vlother                     0\n------------------------------\n\n. vl dir\n\n-------------------------------------------------------------------------------\n                  |                      Macro's contents\n                  |------------------------------------------------------------\nMacro             |  # Vars   Description\n------------------+------------------------------------------------------------\nSystem            |\n  $vldummy        |       1   0/1 variable\n  $vlcategorical  |       1   categorical variable\n  $vlcontinuous   |       9   continuous variables\n  $vluncertain    |       0   perhaps continuous, perhaps categorical variables\n  $vlother        |       0   all missing or constant variables\n-------------------------------------------------------------------------------\nAlternatively, since we’re moving all variables in vluncertain, we can see our first use of the variable list!\n. vl set, dummy nonotes clear\n\n-------------------------------------------------------------------------------\n                  |                      Macro's contents\n                  |------------------------------------------------------------\nMacro             |  # Vars   Description\n------------------+------------------------------------------------------------\nSystem            |\n  $vldummy        |       1   0/1 variable\n  $vlcategorical  |       1   categorical variable\n  $vlcontinuous   |       2   continuous variables\n  $vluncertain    |       7   perhaps continuous, perhaps categorical variables\n  $vlother        |       0   all missing or constant variables\n-------------------------------------------------------------------------------\n\n. vl move ($vluncertain) vlcontinuous\nnote: 7 variables specified and 7 variables moved.\n\n------------------------------\nMacro          # Added/Removed\n------------------------------\n$vldummy                     0\n$vlcategorical               0\n$vlcontinuous                7\n$vluncertain                -7\n$vlother                     0\n------------------------------\nNote that variable lists are essentially just global macros so can be referred to via \\$name. Note, however, that the \\$ is only used when we want to actually use the variable list as a macro - in this case, we wanted to expand vluncertain into it’s list of variables. When we’re referring to a variable list in the vl commands, we do not use the \\$."
  },
  {
    "objectID": "02-vl.html#user-variable-lists",
    "href": "02-vl.html#user-variable-lists",
    "title": "3  Variable Lists",
    "section": "3.3 User Variable Lists",
    "text": "3.3 User Variable Lists\nIn addition to the System variable lists, you can define your own User variables lists, which I imagine will be used far more often. These are easy to create with vl create:\n. vl create mylist1 = (weight mpg)\nnote: $mylist1 initialized with 2 variables.\n\n. vl create mylist2 = (weight length trunk)\nnote: $mylist2 initialized with 3 variables.\n\n. vl dir, user\n\n-------------------------------------------------------------------------------\n                  |                      Macro's contents\n                  |------------------------------------------------------------\nMacro             |  # Vars   Description\n------------------+------------------------------------------------------------\nUser              |\n  $mylist1        |       2   variables\n  $mylist2        |       3   variables\n-------------------------------------------------------------------------------\n\n. vl list, user\n\n------------------------------------------------\nVariable | Macro           Values         Levels\n---------+--------------------------------------\n  weight | $mylist1        integers &gt;=0       64\n     mpg | $mylist1        integers &gt;=0       21\n  weight | $mylist2        integers &gt;=0       64\n  length | $mylist2        integers &gt;=0       47\n   trunk | $mylist2        integers &gt;=0       18\n------------------------------------------------\nNote the addition of the user option to vl list and vl dir to show only User variable lists and suppress the System variable lists. We can also demonstrate the odd sorting syntax here:\n. vl list (_all), sort user\n\n----------------------------------------------------\n    Variable | Macro           Values         Levels\n-------------+--------------------------------------\ndisplacement | not in vluser                      31\n     foreign | not in vluser                       2\n  gear_ratio | not in vluser                        \n    headroom | not in vluser                        \n      length | $mylist2        integers &gt;=0       47\n         mpg | $mylist1        integers &gt;=0       21\n       price | not in vluser                      74\n       rep78 | not in vluser                       5\n       trunk | $mylist2        integers &gt;=0       18\n        turn | not in vluser                      18\n      weight | $mylist1        integers &gt;=0       64\n      weight | $mylist2        integers &gt;=0       64\n----------------------------------------------------\nYou can refer to variable lists in all the usual shortcut ways:\nvl create mylist = (x1-x100 z*)\nWe can add labels to variable lists:\n. vl label mylist1 \"Related to gas consumption\"\n\n. vl label mylist2 \"Related to size\"\n\n. vl dir, user\n\n-------------------------------------------------------------------------------\n                  |                      Macro's contents\n                  |------------------------------------------------------------\nMacro             |  # Vars   Description\n------------------+------------------------------------------------------------\nUser              |\n  $mylist1        |       2   Related to gas consumption\n  $mylist2        |       3   Related to size\n-------------------------------------------------------------------------------\n\n3.3.1 Modifying User Variable Lists\nFirst, note that with User Variable Lists, the vl move command does not work. It only works with system variable lists.\nWe can create new user variable lists which build off old lists with vl create. To add a new variable:\n. vl create mylist3 = mylist2 + (gear_ratio)\nnote: $mylist3 initialized with 4 variables.\n\n. vl list, user\n\n--------------------------------------------------\n  Variable | Macro           Values         Levels\n-----------+--------------------------------------\n    weight | $mylist1        integers &gt;=0       64\n       mpg | $mylist1        integers &gt;=0       21\n    weight | $mylist2        integers &gt;=0       64\n    length | $mylist2        integers &gt;=0       47\n     trunk | $mylist2        integers &gt;=0       18\n    weight | $mylist3        integers &gt;=0       64\n    length | $mylist3        integers &gt;=0       47\n     trunk | $mylist3        integers &gt;=0       18\ngear_ratio | $mylist3        noninteger           \n--------------------------------------------------\n\n. vl create mylist4 = mylist2 - (turn)\nnote: $mylist4 initialized with 3 variables.\n\n. vl list, user\n\n--------------------------------------------------\n  Variable | Macro           Values         Levels\n-----------+--------------------------------------\n    weight | $mylist1        integers &gt;=0       64\n       mpg | $mylist1        integers &gt;=0       21\n    weight | $mylist2        integers &gt;=0       64\n    length | $mylist2        integers &gt;=0       47\n     trunk | $mylist2        integers &gt;=0       18\n    weight | $mylist3        integers &gt;=0       64\n    length | $mylist3        integers &gt;=0       47\n     trunk | $mylist3        integers &gt;=0       18\ngear_ratio | $mylist3        noninteger           \n    weight | $mylist4        integers &gt;=0       64\n    length | $mylist4        integers &gt;=0       47\n     trunk | $mylist4        integers &gt;=0       18\n--------------------------------------------------\nInstead of adding (or removing) single variables at a time, we can instead add or remove lists. Keeping with the comment above, you do not use \\$ here to refer to the list.\n. vl create mylist5 = mylist2 - mylist1\nnote: $mylist5 initialized with 2 variables.\n\n. vl list mylist5\n\n------------------------------------------------\nVariable | Macro           Values         Levels\n---------+--------------------------------------\n  length | $mylist5        integers &gt;=0       47\n   trunk | $mylist5        integers &gt;=0       18\n------------------------------------------------\nHowever, if we want to simply modify an existing list, a better approach would be the vl modify command. vl create and vl modify are similar to generate and replace; the former creates a new variable list while the later changes an existing variable list, but the syntax right of the = is the same.\n. vl modify mylist3 = mylist3 + (headroom)\nnote: 1 variable added to $mylist3.\n\n. vl modify mylist3 = mylist3 - (weight)\nnote: 1 variable removed from $mylist3."
  },
  {
    "objectID": "02-vl.html#dropping-variable-list",
    "href": "02-vl.html#dropping-variable-list",
    "title": "3  Variable Lists",
    "section": "3.4 Dropping variable list",
    "text": "3.4 Dropping variable list\nVariable lists can be dropped via vl drop\n. vl dir, user\n\n-------------------------------------------------------------------------------\n                  |                      Macro's contents\n                  |------------------------------------------------------------\nMacro             |  # Vars   Description\n------------------+------------------------------------------------------------\nUser              |\n  $mylist1        |       2   Related to gas consumption\n  $mylist2        |       3   Related to size\n  $mylist3        |       4   variables\n  $mylist4        |       3   variables\n  $mylist5        |       2   variables\n-------------------------------------------------------------------------------\n\n. vl drop mylist4 mylist5\n\n. vl dir, user\n\n-------------------------------------------------------------------------------\n                  |                      Macro's contents\n                  |------------------------------------------------------------\nMacro             |  # Vars   Description\n------------------+------------------------------------------------------------\nUser              |\n  $mylist1        |       2   Related to gas consumption\n  $mylist2        |       3   Related to size\n  $mylist3        |       4   variables\n-------------------------------------------------------------------------------\nSystem lists cannot be dropped; if you run vl drop vlcontinuous it just removes all the variables from it."
  },
  {
    "objectID": "02-vl.html#using-variable-lists",
    "href": "02-vl.html#using-variable-lists",
    "title": "3  Variable Lists",
    "section": "3.5 Using Variable Lists",
    "text": "3.5 Using Variable Lists\nTo be explicit, we can use variable lists in any command which would take the variables in that list. For example,\n. describe $mylist3\n\nVariable      Storage   Display    Value\n    name         type    format    label      Variable label\n-------------------------------------------------------------------------------\nlength          int     %8.0g                 Length (in.)\ntrunk           int     %8.0g                 Trunk space (cu. ft.)\ngear_ratio      float   %6.2f                 Gear ratio\nheadroom        float   %6.1f                 Headroom (in.)\n\n. describe $vlcategorical\n\nVariable      Storage   Display    Value\n    name         type    format    label      Variable label\n-------------------------------------------------------------------------------\nrep78           int     %8.0g                 Repair record 1978\nWe can also use them in a modeling setting.\n. regress mpg $mylist3\n\n      Source |       SS           df       MS      Number of obs   =        74\n-------------+----------------------------------   F(4, 69)        =     30.77\n       Model |  1565.65298         4  391.413244   Prob &gt; F        =    0.0000\n    Residual |  877.806484        69  12.7218331   R-squared       =    0.6408\n-------------+----------------------------------   Adj R-squared   =    0.6199\n       Total |  2443.45946        73  33.4720474   Root MSE        =    3.5668\n\n------------------------------------------------------------------------------\n         mpg | Coefficient  Std. err.      t    P&gt;|t|     [95% conf. interval]\n-------------+----------------------------------------------------------------\n      length |  -.1837962   .0327629    -5.61   0.000    -.2491564   -.1184361\n       trunk |  -.0103867   .1627025    -0.06   0.949    -.3349693    .3141959\n  gear_ratio |   1.526952    1.27546     1.20   0.235    -1.017521    4.071426\n    headroom |   .0136375   .6602514     0.02   0.984    -1.303528    1.330803\n       _cons |   51.33708   8.300888     6.18   0.000     34.77727     67.8969\n------------------------------------------------------------------------------\nHowever, we’ll run into an issue here - how to specify categorical variables or interactions? The vl substitute command creates “factor-variable lists” that can include factor variable indicators (i.), continuous variable indicators (c.), and interactions (# or ##). (The name “factor-variable list” is slightly disingenuous; you could create a “factor-variable list” that includes no actual factors, for example, if you wanted to interact two continuous variables.)\nCreating a factor-varible list via vl substitute can be done by specifying variables or variable lists.\n. vl substitute sublist1 = mpg mylist3\n\n. display \"$sublist1\"\nmpg length trunk gear_ratio headroom\n\n. vl dir\n\n-------------------------------------------------------------------------------\n                  |                      Macro's contents\n                  |------------------------------------------------------------\nMacro             |  # Vars   Description\n------------------+------------------------------------------------------------\nSystem            |\n  $vldummy        |       1   0/1 variable\n  $vlcategorical  |       1   categorical variable\n  $vlcontinuous   |       9   continuous variables\n  $vluncertain    |       0   perhaps continuous, perhaps categorical variables\n  $vlother        |       0   all missing or constant variables\nUser              |\n  $mylist1        |       2   Related to gas consumption\n  $mylist2        |       3   Related to size\n  $mylist3        |       4   variables\n  $sublist1       |           factor-variable list\n-------------------------------------------------------------------------------\nNote the use of display \"\\$listname\" instead of vl list. Factor-variable lists are not just lists of vairables, they also can include the features above, so must be displayed. Note that in the vl dir, “sublist1” has no number of variables listed, making it stand apart.\nWe can make this more interesting by actually including continuous/factor indicatores and/or interactions.\n. vl substitute sublist2 = c.mylist1##i.vldummy\n\n. display \"$sublist2\"\nweight mpg i.foreign i.foreign#c.weight i.foreign#c.mpg\nNote the need to specify that mylist1 is continuous (with c.). It follows the normal convention that Stata assumes predictors in a model are continuous by default, unless they’re invloved in an interaction, in which case it assumes they are factors by default.\n. regress price $sublist2\n\n      Source |       SS           df       MS      Number of obs   =        74\n-------------+----------------------------------   F(5, 68)        =     16.82\n       Model |   351163805         5  70232760.9   Prob &gt; F        =    0.0000\n    Residual |   283901591        68   4175023.4   R-squared       =    0.5530\n-------------+----------------------------------   Adj R-squared   =    0.5201\n       Total |   635065396        73  8699525.97   Root MSE        =    2043.3\n\n------------------------------------------------------------------------------\n       price | Coefficient  Std. err.      t    P&gt;|t|     [95% conf. interval]\n-------------+----------------------------------------------------------------\n      weight |   4.415037   .8529259     5.18   0.000      2.71305    6.117024\n         mpg |    237.691   125.0383     1.90   0.062    -11.81907     487.201\n             |\n     foreign |\n    Foreign  |   8219.603   7265.713     1.13   0.262    -6278.902    22718.11\n             |\n     foreign#|\n    c.weight |\n    Foreign  |   .7408054   1.647504     0.45   0.654    -2.546738    4.028348\n             |\n     foreign#|\n       c.mpg |\n    Foreign  |  -257.4683    155.426    -1.66   0.102     -567.616    52.67938\n             |\n       _cons |  -13285.44   5149.648    -2.58   0.012    -23561.41   -3009.481\n------------------------------------------------------------------------------\n\n3.5.1 Updating factor-variable Lists\nFactor-variable lists cannot be directly modified.\n. display \"$sublist1\"\nmpg length trunk gear_ratio headroom\n\n. vl modify sublist1 = sublist1 - mpg\nsublist1 not allowed\n    vlusernames containing factor variables not allowed in this context\n    r(198);\nHowever, if you create a factor-variable list using only other variable lists, if those lists get updated, so does the factor-variable list!\n. vl create continuous = (turn trunk)\nnote: $continuous initialized with 2 variables.\n\n. vl create categorical = (rep78 foreign)\nnote: $categorical initialized with 2 variables.\n\n. vl substitute predictors = c.continuous##i.categorical\n\n. display \"$predictors\"\nturn trunk i.rep78 i.foreign i.rep78#c.turn i.foreign#c.turn i.rep78#c.trunk i.\n&gt; foreign#c.trunk\n\n. vl modify continuous = continuous - (trunk)\nnote: 1 variable removed from $continuous.\n\n. quiet vl rebuild\n\n. display \"$predictors\"\nturn i.rep78 i.foreign i.rep78#c.turn i.foreign#c.turn\nNote the call to vl rebuild. Among other things, it will re-generate the factor-variable lists. (It produces a vl dir output without an option to suppress it, hence the use of quiet.)"
  },
  {
    "objectID": "02-vl.html#stored-statistics",
    "href": "02-vl.html#stored-statistics",
    "title": "3  Variable Lists",
    "section": "3.6 Stored Statistics",
    "text": "3.6 Stored Statistics\nYou may have noticed that certain characteristics of the variable are reported.\n. vl list mylist3\n\n--------------------------------------------------\n  Variable | Macro           Values         Levels\n-----------+--------------------------------------\n  headroom | $mylist3        noninteger           \n     trunk | $mylist3        integers &gt;=0       18\n    length | $mylist3        integers &gt;=0       47\ngear_ratio | $mylist3        noninteger           \n--------------------------------------------------\nThis reports some characteristics of the variables (integer, whether it’s non-negative) and the number of unique values. We can also see some other statistics:\n. vl list mylist3, min max obs\n\n-------------------------------------------------------------------------------\nVariable | Macro           Values         Levels       Min       Max        Obs\n---------+---------------------------------------------------------------------\nheadroom | $mylist3        noninteger                  1.5         5         74\n   trunk | $mylist3        integers &gt;=0       18         5        23         74\n  length | $mylist3        integers &gt;=0       47       142       233         74\ngear_r~o | $mylist3        noninteger                 2.19      3.89         74\n-------------------------------------------------------------------------------\nThis is similar to codebook except faster; these characteristics are saved at the time the variable list is created or modified and not updated automatically. If the data changes, this does not get updated.\n. drop if weight &lt; 3000\n(35 observations deleted)\n\n. summarize weight\n\n    Variable |        Obs        Mean    Std. dev.       Min        Max\n-------------+---------------------------------------------------------\n      weight |         39    3653.846    423.5788       3170       4840\n\n. vl list (weight), min max obs\n\n-------------------------------------------------------------------------------\nVariable | Macro           Values         Levels       Min       Max        Obs\n---------+---------------------------------------------------------------------\n  weight | $vlcontinuous   integers &gt;=0       64      1760      4840         74\n  weight | $mylist1        integers &gt;=0       64      1760      4840         74\n  weight | $mylist2        integers &gt;=0       64      1760      4840         74\n-------------------------------------------------------------------------------\nTo re-generate these stored statistics, we call vl set again, with the update option.\n. vl set, update\n\n-------------------------------------------------------------------------------\n                  |                      Macro's contents\n                  |------------------------------------------------------------\nMacro             |  # Vars   Description\n------------------+------------------------------------------------------------\nSystem            |\n  $vldummy        |       1   0/1 variable\n  $vlcategorical  |       1   categorical variable\n  $vlcontinuous   |       9   continuous variables\n  $vluncertain    |       0   perhaps continuous, perhaps categorical variables\n  $vlother        |       0   all missing or constant variables\n-------------------------------------------------------------------------------\n\n. vl list (weight), min max obs\n\n-------------------------------------------------------------------------------\nVariable | Macro           Values         Levels       Min       Max        Obs\n---------+---------------------------------------------------------------------\n  weight | $vlcontinuous   integers &gt;=0       34      3170      4840         39\n  weight | $mylist1        integers &gt;=0       34      3170      4840         39\n  weight | $mylist2        integers &gt;=0       34      3170      4840         39\n-------------------------------------------------------------------------------\nWhen the update option is passed, variable lists are not affected, only stored statistics are updated."
  }
]